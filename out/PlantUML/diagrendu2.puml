@startuml DiagrammeDeClasse1

class Utilisateur {
  - idUtilisateur: integer
  - nom: string
  - prenom: string
  - login: string
  - motDePasse: string
  - email: string
  + S_authentifier()
}

class Actionneur {
  - Id: integer
  - Nom: string
  - Position: string
  - Description: string
}

abstract class Capteur {
  - idCapteur: integer
  - nomCapteur: string
  - positionCapteur: string
  - descriptionCapteur: string
  # constructeur()

  + EnvoyerSignal()
  + DebutExecution()
  + FinExecution()
}

class Cap_Conso extends Capteur {
  + DetecterConsommation()
}

class Cap_Eclairage extends Capteur {
  + DetecterEclairage()
}

class Cap_Temperature extends Capteur {
  + DetecterTemperature()
}

class Detecteur_Gaz extends Capteur {
  + DetecterGaz()
}

class Cap_Incendie extends Capteur {
  + DetecterIncendie()
}

class Cap_Mouvement extends Capteur {
  + DetecterMouvement()
}

class Box_Domotique {
  - idBoxDomotique: integer
  - nomBoxDomotique: string
}

class SMART_HOME {
  - idUtilisateur: integer
  - nom: string
  - personne: Personne 
  - actionneur: actionneur 
  - capteur: Capteur 
  - boxDomotique: Box_Domotique 
  + S_authentifier()
  + Activer_equipement_electrique()
  + Desactiver_equipement_electrique()
  + Piloter_equipements_electriques()
  + Afficher_liste_equipements()
  + Consulter_etats_equipement_electrique()
  + Ajouter_equipement_electrique()
  + Supprimer_equipement()
  + Configurer_equipement_electrique()
}

abstract class Equipement {
  - idEquipement: int
  - nomEquipement: string
  - typeEquipement: string
  - marqueEquipement: string
  - modeFonctionnement: string
  - piece: Piece  
  # constructeur()

  + toString(): string
}

class Lampe extends Equipement {
  - puissance: int
  - couleur: string
  - luminosite: int  
  + allumer(): void
  + eteindre(): void
  + regler_luminosite(nouvelle_luminosite: int): void
}

class Climatisation extends Equipement {
  - temperatureDesiree: float
  - puissance: int
  + allumer(): void
  + eteindre(): void
  + reglerTemperature(nouvelleTemperature: float): void
}

class SystemeAlarme extends Equipement {
  - codeAlarme: string
  - etatAlarme: boolean  
  + activer(): void
  + desactiver(code: string): void
}

class Porte extends Equipement {
  - etatPorte: boolean  
  + ouvrir(): void
  + fermer(): void
}

abstract class Piece {
  - idPiece: int
  - nomPiece: string
  - etage: int
  - superficie: float
    # constructeur()

  + afficher_equipements(): void
}

class Alerte {
  - idAlerte: integer
  - nomAlerte: string
  - dateAlerte: date
  - typeAlerte: string
}

SMART_HOME "1"  o-- "1..*" Piece : posséder
SMART_HOME "1"  o-- "0..*" Equipement : contrôler
SMART_HOME "1..*" o-- "1..*" Utilisateur : posséder
SMART_HOME "1"  o-- "1..*" Box_Domotique : posséder
SMART_HOME "1"  o-- "1..*" Alerte : gérer
Utilisateur "1..*"  o-- "0..*" Alerte : recevoir

Box_Domotique "1"  --> "1..*" Capteur : côntroler
Capteur "1" --> "1..*" Alerte : Déclencher
Box_Domotique "1" --> "1..*" actionneur : côntroler
Box_Domotique "1" --> "1..*" Equipement : Contrôler
Capteur "1..*" --> "1..1" Equipement : Envoyer des données environnementales
Equipement "1..*" --> "1..1" Piece : Se situer dans
actionneur "1..* " --> "1..1" Equipement : agir sur

@enduml
